     1                                  bits 32
     2                                  
     3                                  global  start 
     4                                  
     5                                  
     6                                  extern  exit
     7                                  import  exit msvcrt.dll
     8                                  
     9                                  
    10                                  ;(a+b/c-1)/(b+2)-x
    11                                  
    12                                  segment  data use32 class=data 
    13 00000000 C5000000                    a dd 197
    14 00000004 08                          b db 8
    15 00000005 0200                        c dw 2
    16 00000007 0A00000000000000            x dq 10
    17                                  
    18                                      
    19                                  segment  code use32 class=code
    20                                  start:
    21                                  
    22                                     
    23 00000000 A0[04000000]                mov AL, [b] ; AH = b
    24 00000005 B400                        mov AH, 0 ; AX = b
    25 00000007 66BA0000                    mov DX, 0 ; DX:AX = b
    26 0000000B 66F735[05000000]            div word[c] ; AX = b/c
    27                                      
    28 00000012 66BA0000                    mov DX, 0 ; DX:AX = b/c
    29                                      
    30 00000016 668B0D[00000000]            mov CX, word[a]
    31 0000001D 668B1D[02000000]            mov BX, word[a+2]
    32                                      ; BX:CX = a
    33                                      
    34 00000024 6601C1                      add CX, AX
    35 00000027 6611DA                      adc DX, BX
    36                                      ; BX:CX = a + b/c
    37                                      
    38 0000002A 6649                        dec CX
    39                                      ; DX:CX = a + b/c - 1
    40                                      
    41 0000002C A0[04000000]                mov AL, [b] ; AL = b
    42 00000031 0402                        add AL, 2 ; AL = b + 2
    43 00000033 B400                        mov AH, 0 ; AX = b + 2
    44 00000035 6689DA                      mov DX, BX 
    45 00000038 6689C3                      mov BX, AX
    46                                      ; BX = b
    47 0000003B 6689C8                      mov AX, CX
    48                                      ; DX:AX = a + b/c - 1
    49                                      
    50 0000003E 66F7FB                      idiv BX
    51                                      ; AX = (a + b/c - 1)/(b + 2)
    52                                      
    53 00000041 66BA0000                    mov DX, 0
    54                                      ; DX:AX = (a + b/c - 1)/(b + 2)
    55                                      
    56 00000045 6652                        push DX
    57 00000047 6650                        push AX
    58 00000049 50                          push EAX
    59                                      
    60 0000004A BA00000000                  mov EDX, 0
    61                                      ; EDX:EAX = (a + b/c - 1)/(b + 2)
    62                                      
    63 0000004F 8B0D[07000000]              mov ECX, dword [x]
    64 00000055 8B1D[0B000000]              mov EBX, dword [x+4]
    65                                      ; EBX:EAX = x
    66                                      
    67 0000005B 29C8                        sub EAX, ECX
    68 0000005D 19DA                        sbb EDX, EBX
    69                                      ; EAX:EDX = (a + b/c - 1)/(b + 2) 
    70                                      ; the quotient will be in EAX
    71                                      ; the reminder will be in EDX
    72                                  
    73 0000005F 6A00                        push   dword 0
    74 00000061 FF15[00000000]              call   [exit]
