     1                                  bits 32
     2                                  global  start 
     3                                  
     4                                  
     5                                  extern  exit
     6                                  import  exit msvcrt.dll
     7                                  
     8                                  ;Se dau doua siruri de octeti s1 si s2. Sa se construiasca sirul de octeti d,
     9                                  ;care contine pentru fiecare octet din s2 pozitia sa in s1, sau 0 in caz contrar
    10                                  ;the result:    d:    2, 0, 1, 0, 0, 4, 3, 0, 5
    11                                  segment  data use32 class=data 
    12                                  
    13 00000000 072137132E                  s1 db 7, 33, 55, 19, 46
    14                                      L1 equ $-s1
    15 00000005 2115070D1B1337012E          s2 db 33, 21, 7, 13, 27, 19, 55, 1, 46
    16                                      L2 equ $-s2
    17 0000000E 00<rept>                    d times L2 db 0
    18                                  
    19                                  segment  code use32 class=code
    20                                  start:
    21                                  
    22 00000000 B909000000                  mov ECX, L2 ; we put the length of the first string, so the first loop will be executed for each number from the string
    23 00000005 BE[05000000]                mov ESI, s2 ; In the source register we place the address of s2
    24 0000000A BF[00000000]                mov EDI, s1 ; In the destination register we place the addres of s1
    25 0000000F E339                        jecxz end_loop
    26 00000011 FC                          CLD ; We set the direction flag to 0, so we could go through the string from left to right.
    27                                      first_loop: 
    28 00000012 51                              push ECX ; we save the value of ECX by pushing it to the stack     
    29 00000013 B905000000                      mov ECX, L1 ; we put the length of the second string
    30 00000018 E32D                                jecxz end_of_the_second_loop 
    31 0000001A AC                                  lodsb ;  AL <-- current element from s2, and ESI is increased by one.
    32                                              second_loop:
    33 0000001B AE                                      scasb ; We compare the value from AL with the value from <ES:EDI> by making a fictive subtraction which won't affect their value ; AL - <ES:EDI>
    34                                                  ;If the DF = 0, EDI will be increased by one, but we already know DF is 0 because we setted it's value before the start of the first loop
    35 0000001C 7402                                    je if_equal ; If the difference is equal to 0, it means the numbers are equal so the ZF = 0 and we jump to if_equal:
    36 0000001E EB20                                    jmp not_equal ; If they are not equal we jump to not_equal and we go to the next element from the string s1
    37                                                  if_equal:
    38 00000020 89FB                                        mov EBX, EDI ; We put in EBX the value from EDI so we can modify EDI's value without changing it in the register
    39 00000022 81EB[00000000]                              sub EBX, s1 ; Like that we obtain the position from the string s1 of the current number from the string s2
    40 00000028 81EE[05000000]                              sub ESI, s2 
    41 0000002E 83EE01                                      sub ESI, 1 ; Like that we obtain the corresponding position in the destination string 
    42 00000031 889E[0E000000]                              mov [d + ESI], BL ; We place the position from the string s1 in the destination string on the corresponding position
    43 00000037 81C6[05000000]                              add ESI, s2 
    44 0000003D 83C601                                      add ESI, 1
    45                                                      ;Like that we get back ESI to its initial value
    46                                                  not_equal:
    47 00000040 E2D9                                loop second_loop
    48 00000042 BF[00000000]                        mov EDI, s1 ; We have to place again the addres of s1 in EDI, because EDI was changed and we need to start over in all cases
    49                                              end_of_the_second_loop:
    50 00000047 59                              pop ECX ; We take from the stack the previous value of ECX
    51                                          
    52 00000048 E2C8                        loop first_loop
    53                                      end_loop:
    54 0000004A 6A00                        push   dword 0
    55 0000004C FF15[00000000]              call   [exit] 
