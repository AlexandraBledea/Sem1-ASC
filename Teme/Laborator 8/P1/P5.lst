     1                                  bits 32
     2                                  global start        
     3                                  ;Two natural numbers a and b (a, b: dword, defined in the data segment) are given. Calculate a/b and display the quotient and the remainder in the following format: "Quotient = <quotient>, remainder = <remainder>". 
     4                                  ;The values will be displayed in decimal format (base 10) with sign.
     5                                  
     6                                  
     7                                  ; declare extern functions used by the program
     8                                  extern exit, printf         ; add printf as extern function            
     9                                  import exit msvcrt.dll    
    10                                  import printf msvcrt.dll    ; tell the assembler that function printf can be found in library msvcrt.dll
    11                                  
    12                                  
    13                                  segment data use32 class=data
    14                                  ; char arrays are of type byte
    15 00000000 2F000000                    a dd 47
    16 00000004 0A000000                    b dd 10
    17 00000008 51756F7469656E7420-         format1 db "Quotient = %d",10, 13, 0  ; %d will be replaced with a number
    17 00000011 3D2025640A0D00     
    18 00000018 52656D61696E646572-         format2 db "Remainder = %d",10, 13, 0 ; %d will be replaced with a number
    18 00000021 203D2025640A0D00   
    19                                              ; char strings for C functions must terminate with 0
    20                                  segment  code use32 class=code
    21                                      start:
    22                                          
    23 00000000 A1[00000000]                    mov EAX, dword[a+0]
    24 00000005 99                              cdq
    25                                          ;We put in EDX:EAX the value of a so we could do the division a/b
    26 00000006 8B1D[04000000]                  mov EBX, [b]
    27 0000000C F7FB                            idiv EBX
    28                                          ; EAX = a/b --> the quotient
    29                                          ; EDX = a%b --> the reminder
    30                                          
    31 0000000E 60                              pushad ;We push on stack the values of the registers in case they are modified within the function
    32                                          ;printf("Quotient = %d, EAX)
    33 0000000F 50                              push dword EAX
    34 00000010 68[08000000]                    push dword format1
    35 00000015 FF15[00000000]                  call [printf]     
    36 0000001B 83C408                          add ESP, 4*2
    37 0000001E 61                              popad ;We pop the values of the registers so we could use them with their saved value
    38                                          
    39                                          ;printf("Reminder = %d, EDX)
    40 0000001F 52                              push dword EDX
    41 00000020 68[18000000]                    push dword format2
    42 00000025 FF15[00000000]                  call [printf]
    43 0000002B 83C408                          add ESP, 4*2
    44                                  
    45 0000002E 6A00                            push dword 0      ; push on stack the parameter for exit
    46 00000030 FF15[00000000]                  call [exit]       ; call exit to terminate the programme
