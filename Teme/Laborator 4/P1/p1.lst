     1                                  ;Se dau octetii A si B. Sa se obtina dublucuvantul C:
     2                                  ;bitii 16-31 ai lui C sunt 1
     3                                  ;bitii 0-3 ai lui C coincid cu bitii 3-6 ai lui B
     4                                  ;bitii 4-7 ai lui C au valoarea 0
     5                                  ;bitii 8-10 ai lui C au valoarea 110
     6                                  ;bitii 11-15 ai lui C coincid cu bitii 0-4 ai lui A
     7                                  
     8                                  
     9                                  bits 32
    10                                  
    11                                  global  start 
    12                                  
    13                                  extern  exit
    14                                  import  exit msvcrt.dll
    15                                  
    16                                  segment  data use32 class=data 
    17                                  
    18 00000000 57                          a db 01010111b
    19 00000001 3B                          b db 00111011b
    20 00000002 0000                        c dw 0    ;1111 1111 1111 1111 1101 1110 0000 1010
    21                                  
    22                                  segment  code use32 class=code
    23                                  start:
    24                                  
    25 00000000 BB00000000                  mov EBX, 0
    26 00000005 A0[01000000]                mov AL, [b] ; we pute the value of b in AL
    27 0000000A B400                        mov AH, 0 ; we convert it in AX
    28 0000000C 66BA0000                    mov DX, 0 ; we convert it in DX:AX
    29                                      
    30 00000010 6652                        push DX
    31 00000012 6650                        push AX
    32 00000014 50                          push EAX ; we put in EAX the value of b
    33                                      
    34 00000015 83E078                      and EAX, 00000000000000000000000001111000b ; EAX = 0000 0000 0000 0000 0000 0000 0101 0000 ; we isolate from b the bits 0-3
    35 00000018 C1C802                      ror EAX, 2 ; EAX = 0000 0000 0000 0000 0000 0000 0000 1010 ; we rotate 2 positions to the right
    36                                      
    37 0000001B 09C3                        or EBX, EAX ; EBX = 0000 0000 0000 0000 0000 0000 0000 1010 ; we put the bits in the result
    38 0000001D 81CB0A06FFFF                or EBX, 11111111111111110000011000001010b ; we make the bits from the positions 4-7 to have the value 0, from 8-10 to have the value 110 and from 16-31 to have the value 1
    39                                      
    40 00000023 A0[00000000]                mov AL, [a] ; we pute the value of a in AL
    41 00000028 B400                        mov AH, 0 ; we convert it in AX
    42 0000002A 66BA0000                    mov DX, 0 ; we convert it in DX:AX
    43                                      
    44 0000002E 6652                        push DX
    45 00000030 6650                        push AX
    46 00000032 50                          push EAX ; we put in EAX the value of a
    47                                      
    48 00000033 83E01F                      and EAX, 00000000000000000000000000011111b ; EAX = 0000 0000 0000 0000 0000 0000 0001 1011 ; we isolate from a the bits 0-4
    49 00000036 C1C00A                      rol EAX, 10 ; EAX = 0000 0000 0000 0000 1101 1000 0000 0000 ; We rotate 10 positions to left
    50 00000039 09C3                        or EBX, EAX ; we put the bits in the result 
    51                                      
    52 0000003B 891D[02000000]              mov dword [c], EBX ; c = 1111 1111 1111 1111 1101 1110 0000 1010
    53                                      
    54 00000041 6A00                        push   dword 0
    55 00000043 FF15[00000000]              call   [exit]
    56                                      
    57                                      
    58                                      
