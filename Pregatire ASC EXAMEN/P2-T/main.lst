     1                                  bits 32
     2                                  
     3                                  global start
     4                                  
     5                                  extern exit, printf, scanf
     6                                  extern changeChar
     7                                  
     8                                  import exit msvcrt.dll
     9                                  import printf msvcrt.dll
    10                                  import scanf msvcrt.dll
    11                                  
    12                                  
    13                                  segment data use32 class=data
    14                                  
    15                                      ;s1 db 'ana,are,mere,eu,nu,mai,am'
    16                                      ;s1 db 'ppp,ppp,mppp,pp,pp,ppp,pp'
    17 00000000 7071702C7070                s1 db 'pqp,pp'
    18                                      ;s2 db '---,&--,&---,--,&-,&&&,--'
    19                                      ;s2 db '---,---,&---,--,--,---,--'
    20 00000006 2D2D2D2C2D2D                s2 db '---,--'
    21                                      len equ $-s2
    22 0000000C 00<rept>                    s3 times len db 0
    23 00000012 00000000                    index dd 0
    24 00000016 00<rept>                    frecv times 25 db 0
    25 0000002F 00                          max db 0
    26 00000030 257500                      format db "%u", 0
    27                                  
    28                                  segment code use32 class=code
    29                                      start:
    30 00000000 BE[00000000]                mov ESI, s1
    31 00000005 BB00000000                  mov EBX, 0
    32 0000000A BF[0C000000]                mov EDI, s3
    33 0000000F B906000000                  mov ECX, len
    34                                      
    35                                      parse_s1:
    36 00000014 B800000000                      mov EAX, 0
    37 00000019 AC                              lodsb
    38 0000001A 3C2C                            cmp AL, ','
    39 0000001C 7425                            je continue
    40                                          
    41 0000001E BA00000000                      mov EDX, 0
    42 00000023 8A93[06000000]                  mov DL, [s2 + EBX]
    43 00000029 891D[12000000]                  mov dword[index], EBX
    44 0000002F 43                              inc EBX
    45                                          
    46 00000030 50                              push EAX
    47 00000031 52                              push EDX
    48 00000032 FF35[12000000]                  push dword [index]
    49 00000038 E8(00000000)                    call changeChar
    50 0000003D 83C40C                          add ESP, 4*3
    51                                          
    52 00000040 AA                              stosb ; In AL we will have the changed character
    53 00000041 EB02                            jmp next
    54                                          
    55                                          continue:
    56 00000043 AA                                  stosb
    57 00000044 43                                  inc EBX
    58                                          
    59                                          next:
    60                                          
    61 00000045 E2CD                        loop parse_s1
    62                                      
    63 00000047 BE[0C000000]                mov ESI, s3
    64 0000004C B906000000                  mov ECX, len
    65                                      parse_s3:
    66 00000051 B800000000                      mov EAX, 0
    67 00000056 AC                              lodsb
    68 00000057 3C2C                            cmp AL, ','
    69 00000059 7409                            je next2
    70                                          
    71 0000005B 2C61                            sub AL, 'a'
    72 0000005D 8080[16000000]01                add byte[frecv + EAX], 1
    73                                          
    74                                          next2:
    75 00000064 E2EB                        loop parse_s3
    76                                          
    77 00000066 BE[16000000]                mov ESI, frecv
    78 0000006B B919000000                  mov ECX, 25
    79                                      parse_frecv:
    80 00000070 AC                              lodsb
    81 00000071 3805[2F000000]                  cmp byte[max], AL
    82 00000077 7602                            jbe change_max
    83 00000079 7705                            ja next3
    84                                          
    85                                          change_max:
    86 0000007B A2[2F000000]                        mov byte[max], AL
    87                                          
    88                                          next3:
    89 00000080 E2EE                        loop parse_frecv
    90                                      
    91 00000082 B800000000                  mov EAX, 0
    92 00000087 A0[2F000000]                mov AL, [max]
    93                                      
    94 0000008C 50                          push EAX
    95 0000008D 68[30000000]                push dword format
    96 00000092 FF15[00000000]              call [printf]
    97 00000098 83C408                      add ESP, 4*2
    98                                      
    99 0000009B 6A00                        push dword 0
   100 0000009D FF15[00000000]              call [exit]
